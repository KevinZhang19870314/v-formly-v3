import{_ as a,r,o as n,c as h,a as t,b as d,e as o,d as c}from"./app.5b6a6178.js";const l={},s=c(`<h1 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据" aria-hidden="true">#</a> 元数据</h1><p>元数据<code>meta</code>定义了标准的 JSON Schema 结构和非标准的嵌套在 JSON Schema 中的<code>ui</code>属性，通过定义元数据<code>meta</code>并解析它来构建我们的表单。</p><p>一个最简单的 meta 结构如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>meta <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 可有可无，默认会强制为 \`object\`</span>
  <span class="token literal-property property">properties</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,4),i=t("code",null,"meta",-1),u=t("code",null,"meta",-1),b=t("code",null,"context",-1),p=t("code",null,"id",-1),m=t("code",null,"value",-1),_=t("code",null,"type",-1),y=t("strong",null,[d("类"),t("code",null,"meta"),d("实例化后就是"),t("code",null,"context")],-1),g=t("code",null,"meta",-1),f={href:"https://ajv.js.org/json-schema.html#json-data-type",target:"_blank",rel:"noopener noreferrer"},x=c(`<div class="language-text" data-ext="text"><pre class="language-text"><code>|-- base.meta.js &lt;!-- 此类为基类，其他\`meta\`类都继承于它 --&gt;
    |-- array.meta.js
    |-- boolean.meta.js
    |-- number.meta.js
    |-- object.meta.js
    |-- string.meta.js
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p><strong><code>meta</code></strong>是 JSON 数据结构，<strong>类<code>meta</code></strong>是存储<code>meta</code>等数据结构的 js 类。</p></div><p>下面我们分别介绍<code>meta</code>中的标准 JSON Schema 和<code>ui</code>。</p><h2 id="json-schema" tabindex="-1"><a class="header-anchor" href="#json-schema" aria-hidden="true">#</a> JSON Schema</h2>`,4),j={href:"https://json-schema.org/",target:"_blank",rel:"noopener noreferrer"},v=c('<h3 id="常规类" tabindex="-1"><a class="header-anchor" href="#常规类" aria-hidden="true">#</a> 常规类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:type</code></td><td>数据类型，支持 JavaScript 基础类型</td><td><code>number,string,boolean,object,array</code></td><td><code>object</code></td></tr><tr><td><code>:enum</code></td><td>枚举，静态数据源</td><td><code>any[]</code></td><td>-</td></tr></tbody></table><h3 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型" aria-hidden="true">#</a> 数值类型</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:minimum</code></td><td>最小值</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:exclusiveMinimum</code></td><td>约束是否包括 <code>minimum</code> 值</td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>:maximum</code></td><td>最大值</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:exclusiveMaximum</code></td><td>约束是否包括 <code>maximum</code> 值</td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>:multipleOf</code></td><td>倍数</td><td><code>number</code></td><td>-</td></tr></tbody></table><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:maxLength</code></td><td>定义字符串的最大长度</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:minLength</code></td><td>定义字符串的最小长度</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:pattern</code></td><td>验证输入字段正则表达式字符串</td><td><code>string</code></td><td>-</td></tr></tbody></table><h3 id="数组类型" tabindex="-1"><a class="header-anchor" href="#数组类型" aria-hidden="true">#</a> 数组类型</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:items</code></td><td>数组元素类型描述，只支持数组对象，若需要基础类型数组可通过其他部件支持</td><td><code>object</code></td><td>-</td></tr><tr><td><code>:minItems</code></td><td>约束数组最小的元素个数</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:maxItems</code></td><td>约束数组最大的元素个数</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:uniqueItems</code></td><td>约束数组每个元素都不相同(TODO)</td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>:additionalItems</code></td><td>数组额外元素的校验规则(TODO)</td><td><code>object</code></td><td>-</td></tr></tbody></table><h3 id="对象类型" tabindex="-1"><a class="header-anchor" href="#对象类型" aria-hidden="true">#</a> 对象类型</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:maxProperties</code></td><td>最大属性个数，必须是非负整数</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:minProperties</code></td><td>最小属性个数，必须是非负整数</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:required</code></td><td>必需属性</td><td><code>string[]</code></td><td>-</td></tr><tr><td><code>:properties</code></td><td>定义属性</td><td><code>{ [key: string]: object }</code></td><td>-</td></tr></tbody></table><h3 id="条件类-todo-未测试" tabindex="-1"><a class="header-anchor" href="#条件类-todo-未测试" aria-hidden="true">#</a> 条件类(TODO: 未测试)</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:if</code></td><td>条件验证</td><td><code>object</code></td><td>-</td></tr><tr><td><code>:then</code></td><td>条件验证</td><td><code>object</code></td><td>-</td></tr><tr><td><code>:else</code></td><td>条件验证</td><td><code>object</code></td><td>-</td></tr></tbody></table><h3 id="逻辑类" tabindex="-1"><a class="header-anchor" href="#逻辑类" aria-hidden="true">#</a> 逻辑类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:allOf</code></td><td><strong>不建议</strong> 使用，可用 <code>required</code> 替代</td><td><code>any[]</code></td><td>-</td></tr><tr><td><code>:anyOf</code></td><td><strong>不建议</strong> 使用，可用 <code>required</code> 和 <code>minProperties</code> 替代</td><td><code>any[]</code></td><td>-</td></tr><tr><td><code>:oneOf</code></td><td><strong>不建议</strong> 使用，值必须是其中之一</td><td><code>any[]</code></td><td>-</td></tr></tbody></table><h3 id="格式与视觉类" tabindex="-1"><a class="header-anchor" href="#格式与视觉类" aria-hidden="true">#</a> 格式与视觉类</h3>',15),k=t("thead",null,[t("tr",null,[t("th",null,"参数"),t("th",null,"说明"),t("th",null,"类型"),t("th",null,"默认值")])],-1),O=t("tr",null,[t("td",null,[t("code",null,":title")]),t("td",null,"属性描述"),t("td",null,[t("code",null,"string")]),t("td",null,"-")],-1),S=t("tr",null,[t("td",null,[t("code",null,":description")]),t("td",null,"属性目的性解释"),t("td",null,[t("code",null,"string")]),t("td",null,"-")],-1),N=t("tr",null,[t("td",null,[t("code",null,":default")]),t("td",null,"默认值"),t("td",null,[t("code",null,"any")]),t("td",null,"-")],-1),I=t("tr",null,[t("td",null,[t("code",null,":readOnly")]),t("td",null,[d("是否只读状态，等同 "),t("code",null,"disabled")]),t("td",null,[t("code",null,"boolean")]),t("td",null,"-")],-1),q=t("td",null,[t("code",null,":format")],-1),J={href:"http://json-schema.org/latest/json-schema-validation.html#rfc.section.7.3",target:"_blank",rel:"noopener noreferrer"},T=t("td",null,[t("code",null,"string")],-1),L=t("td",null,"-",-1),V=c('<h3 id="非标准" tabindex="-1"><a class="header-anchor" href="#非标准" aria-hidden="true">#</a> 非标准</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:ui</code></td><td>指定 UI 配置信息，优先级高于 <code>v-formly-v3</code> 组件 <code>ui</code> 属性值</td><td><code>any</code></td><td>-</td></tr></tbody></table><h2 id="ui" tabindex="-1"><a class="header-anchor" href="#ui" aria-hidden="true">#</a> UI</h2><h3 id="基础类" tabindex="-1"><a class="header-anchor" href="#基础类" aria-hidden="true">#</a> 基础类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:visibleIf</code></td><td>指定条件时才显示</td><td><code>{ [key: string]: any[] | ((value: any, property: FormProperty) =&gt; boolean) }</code></td><td>-</td></tr></tbody></table><h3 id="校验类" tabindex="-1"><a class="header-anchor" href="#校验类" aria-hidden="true">#</a> 校验类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:errors</code></td><td>自定义错误信息文本</td><td><code>{ [ key: string ]: string | ((obj: object) =&gt; string) }</code></td><td>-</td></tr><tr><td><code>:showRequired</code></td><td>是否展示必填项标识 <code>*</code></td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>:validator</code></td><td>自定义校验</td><td><code>(value: any) =&gt; any[]</code></td><td>-</td></tr></tbody></table><h3 id="数组类" tabindex="-1"><a class="header-anchor" href="#数组类" aria-hidden="true">#</a> 数组类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:items</code></td><td>指定子元素的 UI</td><td><code>object</code></td><td>-</td></tr><tr><td><code>:addTitle</code></td><td>指定添加按钮文本</td><td><code>string</code></td><td><code>添加</code></td></tr><tr><td><code>:addType</code></td><td>指定添加按钮风格，等同按钮 <code>type</code></td><td><code>string</code></td><td><code>dashed</code></td></tr><tr><td><code>:removable</code></td><td>指定是否显示移除按钮</td><td><code>boolean</code></td><td>-</td></tr><tr><td><code>:removeTitle</code></td><td>指定移除按钮文本</td><td><code>string</code></td><td><code>移除</code></td></tr></tbody></table><h3 id="表单元素类" tabindex="-1"><a class="header-anchor" href="#表单元素类" aria-hidden="true">#</a> 表单元素类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:type</code></td><td>指定 <code>input</code> 的 <code>type</code> 值</td><td><code>string</code></td><td><code>text</code></td></tr><tr><td><code>:placeholder</code></td><td>文字框中显示提示信息</td><td><code>string</code></td><td>-</td></tr><tr><td><code>:autofocus</code></td><td>加载时是否获得焦点</td><td><code>boolean</code></td><td>-</td></tr></tbody></table><h3 id="渲染类" tabindex="-1"><a class="header-anchor" href="#渲染类" aria-hidden="true">#</a> 渲染类</h3><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:component</code></td><td>指定采用什么组件渲染</td><td><code>string</code></td><td>-</td></tr><tr><td><code>:size</code></td><td>元素组件大小</td><td><code>default,large,small</code></td><td>-</td></tr><tr><td><code>:grid</code></td><td>响应式属性</td><td><code>object</code></td><td>-</td></tr><tr><td><code>:optional</code></td><td>标签可选信息</td><td><code>string</code></td><td>-</td></tr><tr><td><code>:optionalHelp</code></td><td>标签可选帮助</td><td><code>string, any</code></td><td>-</td></tr></tbody></table><h3 id="响应式属性" tabindex="-1"><a class="header-anchor" href="#响应式属性" aria-hidden="true">#</a> 响应式属性</h3>',14),P=t("code",null,"grid",-1),z={href:"https://ng.ant.design/components/grid/zh",target:"_blank",rel:"noopener noreferrer"},B=t("code",null,"grid",-1),C=c('<table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:gutter</code></td><td>栅格间隔</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:span</code></td><td>每个表单元素栅格占位格数，为 <code>0</code> 时相当于 <code>display: none</code></td><td><code>number</code></td><td>-</td></tr><tr><td><code>:xs</code></td><td><code>&lt;768px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:sm</code></td><td><code>≥768px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:md</code></td><td><code>≥992px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:lg</code></td><td><code>≥1200px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:xl</code></td><td><code>≥1600px</code> 响应式栅格，可为栅格数或一个包含其他属性的对象</td><td><code>number</code></td><td>-</td></tr><tr><td><code>:xxl</code></td><td>保留字段，<code>0.7.0</code> 后支持</td><td><code>number</code></td><td>-</td></tr></tbody></table><h3 id="水平布局类-schema" tabindex="-1"><a class="header-anchor" href="#水平布局类-schema" aria-hidden="true">#</a> 水平布局类 Schema</h3><blockquote><p><strong>务必</strong>二者总和为 <code>24</code></p></blockquote><table><thead><tr><th>参数</th><th>说明</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td><code>:spanLabel</code></td><td><code>label</code> 所占栅格数</td><td><code>number</code></td><td>5</td></tr><tr><td><code>:spanControl</code></td><td>表单控件所占栅格数</td><td><code>number</code></td><td>19</td></tr><tr><td><code>:offsetControl</code></td><td><code>control</code> 栅格左侧的间隔格数，间隔内不可以有栅格</td><td><code>number</code></td><td>-</td></tr></tbody></table><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3><p>实现了 delon form 中的大部分属性，未实现部分后面考虑是否需要添加进去。</p>',6),D={href:"https://ng-alain.com/form/schema/zh",target:"_blank",rel:"noopener noreferrer"};function E(U,M){const e=r("ExternalLinkIcon");return n(),h("div",null,[s,t("p",null,[d("v-formly-v3 中通过解析"),i,d("并实例化存储"),u,d("结构的类为"),b,d("，即表单组件的上下文，其中存储着表单组件的诸如"),p,d("、"),m,d("、"),_,d("等等信息，以及组件的处理逻辑和校验等。这样，我们就可以认为 "),y,d("。我们目前定义的的"),g,d("有以下几个，分别对应"),t("a",f,[d("AJV 中的 JSON 基本数据类型"),o(e)]),d("：")]),x,t("p",null,[d("JSON Schema 有完整的"),t("a",j,[d("文档说明"),o(e)]),d("，以下为 v-formly-v3 中使用的一些属性说明。")]),v,t("table",null,[k,t("tbody",null,[O,S,N,I,t("tr",null,[q,t("td",null,[d("数据格式，"),t("a",J,[d("文档"),o(e)])]),T,L])])]),V,t("p",null,[P,d(" 属性等同完整的 "),t("a",z,[d("Grid 栅格系统"),o(e)]),d("，透过 "),B,d(" 可以决定表单如何渲染。")]),C,t("p",null,[t("a",D,[d("@delon/form Schema"),o(e)])])])}const A=a(l,[["render",E],["__file","meta.html.vue"]]);export{A as default};
